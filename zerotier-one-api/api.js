"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * ZeroTierOne Service API
 * <p> This API controls the ZeroTier service that runs in the background on your computer. This is how zerotier-cli, and the macOS and Windows apps control the service. </p> <p> API requests must be authenticated via an authentication token. ZeroTier One saves this token in the authtoken.secret file in its working directory. This token may be supplied via the X-ZT1-Auth HTTP request header. </p> <p> For example: <code>curl -H \"X-ZT1-Auth: $TOKEN\" http://localhost:9993/status</code> </p> <p> The token can be found in: <ul> <li>Mac :: ~/Library/Application Support/ZeroTier/authtoken.secret</li> <li>Windows :: \\ProgramData\\ZeroTier\\One</li> <li>Linux :: /var/lib/zerotier-one</li> </ul> </p> <p> You can get the OpenAPI spec here as well: <code>https://docs.zerotier.com/openapi/servicev1.json</code></p>
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.StatusApi = exports.StatusApiFactory = exports.StatusApiFp = exports.StatusApiAxiosParamCreator = exports.PeerApi = exports.PeerApiFactory = exports.PeerApiFp = exports.PeerApiAxiosParamCreator = exports.NetworkApi = exports.NetworkApiFactory = exports.NetworkApiFp = exports.NetworkApiAxiosParamCreator = exports.ControllerApi = exports.ControllerApiFactory = exports.ControllerApiFp = exports.ControllerApiAxiosParamCreator = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
/**
 * ControllerApi - axios parameter creator
 * @export
 */
var ControllerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * Create a new network with a random ID.
         * @summary Generate Random Network ID.
         * @param {string} controllerID Node ID of the controller.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateControllerNetwork: function (controllerID, controllerNetwork, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'controllerID' is not null or undefined
                            (0, common_1.assertParamExists)('generateControllerNetwork', 'controllerID', controllerID);
                            // verify required parameter 'controllerNetwork' is not null or undefined
                            (0, common_1.assertParamExists)('generateControllerNetwork', 'controllerNetwork', controllerNetwork);
                            localVarPath = "/controller/network/{controllerID}______"
                                .replace("{".concat("controllerID", "}"), encodeURIComponent(String(controllerID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(controllerNetwork, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Get details of a network by it\'s ID.
         * @summary Get Network by ID.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetwork: function (networkID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('getControllerNetwork', 'networkID', networkID);
                            localVarPath = "/controller/network/{networkID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Network Member Details by ID.
         * @param {string} networkID ID of the network.
         * @param {string} nodeID ID of the member node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMember: function (networkID, nodeID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('getControllerNetworkMember', 'networkID', networkID);
                            // verify required parameter 'nodeID' is not null or undefined
                            (0, common_1.assertParamExists)('getControllerNetworkMember', 'nodeID', nodeID);
                            localVarPath = "/controller/network/{networkID}/member/{nodeID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)))
                                .replace("{".concat("nodeID", "}"), encodeURIComponent(String(nodeID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * JSON object containing all member IDs as keys and their memberRevisionCounter values as values.
         * @summary List Network Members.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMembers: function (networkID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('getControllerNetworkMembers', 'networkID', networkID);
                            localVarPath = "/controller/network/{networkID}/member"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * List IDs of all networks hosted by this controller.
         * @summary List Networks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworks: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/controller/network";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         * Check for controller function and return controller status.
         * @summary Get Controller Status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerStatus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/controller";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create or Update a Network.
         * @param {string} networkID ID of the network.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerNetwork: function (networkID, controllerNetwork, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('setControllerNetwork', 'networkID', networkID);
                            // verify required parameter 'controllerNetwork' is not null or undefined
                            (0, common_1.assertParamExists)('setControllerNetwork', 'controllerNetwork', controllerNetwork);
                            localVarPath = "/controller/network/{networkID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(controllerNetwork, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.ControllerApiAxiosParamCreator = ControllerApiAxiosParamCreator;
/**
 * ControllerApi - functional programming interface
 * @export
 */
var ControllerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.ControllerApiAxiosParamCreator)(configuration);
    return {
        /**
         * Create a new network with a random ID.
         * @summary Generate Random Network ID.
         * @param {string} controllerID Node ID of the controller.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateControllerNetwork: function (controllerID, controllerNetwork, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.generateControllerNetwork(controllerID, controllerNetwork, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Get details of a network by it\'s ID.
         * @summary Get Network by ID.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetwork: function (networkID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getControllerNetwork(networkID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get Network Member Details by ID.
         * @param {string} networkID ID of the network.
         * @param {string} nodeID ID of the member node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMember: function (networkID, nodeID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getControllerNetworkMember(networkID, nodeID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * JSON object containing all member IDs as keys and their memberRevisionCounter values as values.
         * @summary List Network Members.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMembers: function (networkID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getControllerNetworkMembers(networkID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * List IDs of all networks hosted by this controller.
         * @summary List Networks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworks: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getControllerNetworks(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         * Check for controller function and return controller status.
         * @summary Get Controller Status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerStatus: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getControllerStatus(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Create or Update a Network.
         * @param {string} networkID ID of the network.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerNetwork: function (networkID, controllerNetwork, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.setControllerNetwork(networkID, controllerNetwork, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.ControllerApiFp = ControllerApiFp;
/**
 * ControllerApi - factory interface
 * @export
 */
var ControllerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.ControllerApiFp)(configuration);
    return {
        /**
         * Create a new network with a random ID.
         * @summary Generate Random Network ID.
         * @param {string} controllerID Node ID of the controller.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateControllerNetwork: function (controllerID, controllerNetwork, options) {
            return localVarFp.generateControllerNetwork(controllerID, controllerNetwork, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Get details of a network by it\'s ID.
         * @summary Get Network by ID.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetwork: function (networkID, options) {
            return localVarFp.getControllerNetwork(networkID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get Network Member Details by ID.
         * @param {string} networkID ID of the network.
         * @param {string} nodeID ID of the member node.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMember: function (networkID, nodeID, options) {
            return localVarFp.getControllerNetworkMember(networkID, nodeID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * JSON object containing all member IDs as keys and their memberRevisionCounter values as values.
         * @summary List Network Members.
         * @param {string} networkID ID of the network.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworkMembers: function (networkID, options) {
            return localVarFp.getControllerNetworkMembers(networkID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * List IDs of all networks hosted by this controller.
         * @summary List Networks.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerNetworks: function (options) {
            return localVarFp.getControllerNetworks(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         * Check for controller function and return controller status.
         * @summary Get Controller Status.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getControllerStatus: function (options) {
            return localVarFp.getControllerStatus(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create or Update a Network.
         * @param {string} networkID ID of the network.
         * @param {ControllerNetwork} controllerNetwork Network object JSON.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setControllerNetwork: function (networkID, controllerNetwork, options) {
            return localVarFp.setControllerNetwork(networkID, controllerNetwork, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.ControllerApiFactory = ControllerApiFactory;
/**
 * ControllerApi - object-oriented interface
 * @export
 * @class ControllerApi
 * @extends {BaseAPI}
 */
var ControllerApi = /** @class */ (function (_super) {
    __extends(ControllerApi, _super);
    function ControllerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new network with a random ID.
     * @summary Generate Random Network ID.
     * @param {string} controllerID Node ID of the controller.
     * @param {ControllerNetwork} controllerNetwork Network object JSON.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.generateControllerNetwork = function (controllerID, controllerNetwork, options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).generateControllerNetwork(controllerID, controllerNetwork, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Get details of a network by it\'s ID.
     * @summary Get Network by ID.
     * @param {string} networkID ID of the network.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.getControllerNetwork = function (networkID, options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).getControllerNetwork(networkID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get Network Member Details by ID.
     * @param {string} networkID ID of the network.
     * @param {string} nodeID ID of the member node.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.getControllerNetworkMember = function (networkID, nodeID, options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).getControllerNetworkMember(networkID, nodeID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * JSON object containing all member IDs as keys and their memberRevisionCounter values as values.
     * @summary List Network Members.
     * @param {string} networkID ID of the network.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.getControllerNetworkMembers = function (networkID, options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).getControllerNetworkMembers(networkID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * List IDs of all networks hosted by this controller.
     * @summary List Networks.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.getControllerNetworks = function (options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).getControllerNetworks(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * Check for controller function and return controller status.
     * @summary Get Controller Status.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.getControllerStatus = function (options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).getControllerStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create or Update a Network.
     * @param {string} networkID ID of the network.
     * @param {ControllerNetwork} controllerNetwork Network object JSON.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ControllerApi
     */
    ControllerApi.prototype.setControllerNetwork = function (networkID, controllerNetwork, options) {
        var _this = this;
        return (0, exports.ControllerApiFp)(this.configuration).setControllerNetwork(networkID, controllerNetwork, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ControllerApi;
}(base_1.BaseAPI));
exports.ControllerApi = ControllerApi;
/**
 * NetworkApi - axios parameter creator
 * @export
 */
var NetworkApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Leave a network.
         * @param {string} networkID ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNetwork: function (networkID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('deleteNetwork', 'networkID', networkID);
                            localVarPath = "/network/{networkID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a joined Network membership configuration by Network ID.
         * @param {string} networkID ID of the network to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork: function (networkID, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('getNetwork', 'networkID', networkID);
                            localVarPath = "/network/{networkID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all network memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/network";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Join a network or update it\'s configuration by Network ID.
         * @param {string} networkID ID of the network to change.
         * @param {Network} network Network membership object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNetwork: function (networkID, network, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'networkID' is not null or undefined
                            (0, common_1.assertParamExists)('updateNetwork', 'networkID', networkID);
                            // verify required parameter 'network' is not null or undefined
                            (0, common_1.assertParamExists)('updateNetwork', 'network', network);
                            localVarPath = "/network/{networkID}"
                                .replace("{".concat("networkID", "}"), encodeURIComponent(String(networkID)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(network, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.NetworkApiAxiosParamCreator = NetworkApiAxiosParamCreator;
/**
 * NetworkApi - functional programming interface
 * @export
 */
var NetworkApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.NetworkApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Leave a network.
         * @param {string} networkID ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNetwork: function (networkID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deleteNetwork(networkID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a joined Network membership configuration by Network ID.
         * @param {string} networkID ID of the network to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork: function (networkID, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNetwork(networkID, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all network memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getNetworks(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Join a network or update it\'s configuration by Network ID.
         * @param {string} networkID ID of the network to change.
         * @param {Network} network Network membership object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNetwork: function (networkID, network, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.updateNetwork(networkID, network, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.NetworkApiFp = NetworkApiFp;
/**
 * NetworkApi - factory interface
 * @export
 */
var NetworkApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.NetworkApiFp)(configuration);
    return {
        /**
         *
         * @summary Leave a network.
         * @param {string} networkID ID of the network
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNetwork: function (networkID, options) {
            return localVarFp.deleteNetwork(networkID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get a joined Network membership configuration by Network ID.
         * @param {string} networkID ID of the network to get.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetwork: function (networkID, options) {
            return localVarFp.getNetwork(networkID, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all network memberships.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworks: function (options) {
            return localVarFp.getNetworks(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Join a network or update it\'s configuration by Network ID.
         * @param {string} networkID ID of the network to change.
         * @param {Network} network Network membership object
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNetwork: function (networkID, network, options) {
            return localVarFp.updateNetwork(networkID, network, options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.NetworkApiFactory = NetworkApiFactory;
/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
var NetworkApi = /** @class */ (function (_super) {
    __extends(NetworkApi, _super);
    function NetworkApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Leave a network.
     * @param {string} networkID ID of the network
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    NetworkApi.prototype.deleteNetwork = function (networkID, options) {
        var _this = this;
        return (0, exports.NetworkApiFp)(this.configuration).deleteNetwork(networkID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get a joined Network membership configuration by Network ID.
     * @param {string} networkID ID of the network to get.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    NetworkApi.prototype.getNetwork = function (networkID, options) {
        var _this = this;
        return (0, exports.NetworkApiFp)(this.configuration).getNetwork(networkID, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all network memberships.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    NetworkApi.prototype.getNetworks = function (options) {
        var _this = this;
        return (0, exports.NetworkApiFp)(this.configuration).getNetworks(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Join a network or update it\'s configuration by Network ID.
     * @param {string} networkID ID of the network to change.
     * @param {Network} network Network membership object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    NetworkApi.prototype.updateNetwork = function (networkID, network, options) {
        var _this = this;
        return (0, exports.NetworkApiFp)(this.configuration).updateNetwork(networkID, network, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return NetworkApi;
}(base_1.BaseAPI));
exports.NetworkApi = NetworkApi;
/**
 * PeerApi - axios parameter creator
 * @export
 */
var PeerApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get information about a specific peer by Node ID.
         * @param {string} address ZeroTier address of the peer to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer: function (address, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'address' is not null or undefined
                            (0, common_1.assertParamExists)('getPeer', 'address', address);
                            localVarPath = "/peer/{address}"
                                .replace("{".concat("address", "}"), encodeURIComponent(String(address)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all peers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/peer";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.PeerApiAxiosParamCreator = PeerApiAxiosParamCreator;
/**
 * PeerApi - functional programming interface
 * @export
 */
var PeerApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.PeerApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Get information about a specific peer by Node ID.
         * @param {string} address ZeroTier address of the peer to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer: function (address, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPeer(address, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get all peers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getPeers(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.PeerApiFp = PeerApiFp;
/**
 * PeerApi - factory interface
 * @export
 */
var PeerApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.PeerApiFp)(configuration);
    return {
        /**
         *
         * @summary Get information about a specific peer by Node ID.
         * @param {string} address ZeroTier address of the peer to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeer: function (address, options) {
            return localVarFp.getPeer(address, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get all peers.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeers: function (options) {
            return localVarFp.getPeers(options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.PeerApiFactory = PeerApiFactory;
/**
 * PeerApi - object-oriented interface
 * @export
 * @class PeerApi
 * @extends {BaseAPI}
 */
var PeerApi = /** @class */ (function (_super) {
    __extends(PeerApi, _super);
    function PeerApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get information about a specific peer by Node ID.
     * @param {string} address ZeroTier address of the peer to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeerApi
     */
    PeerApi.prototype.getPeer = function (address, options) {
        var _this = this;
        return (0, exports.PeerApiFp)(this.configuration).getPeer(address, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get all peers.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeerApi
     */
    PeerApi.prototype.getPeers = function (options) {
        var _this = this;
        return (0, exports.PeerApiFp)(this.configuration).getPeers(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return PeerApi;
}(base_1.BaseAPI));
exports.PeerApi = PeerApi;
/**
 * StatusApi - axios parameter creator
 * @export
 */
var StatusApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Node status and addressing info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/status";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication ApiKeyAuth required
                            return [4 /*yield*/, (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "X-ZT1-Auth", configuration)];
                        case 1:
                            // authentication ApiKeyAuth required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions
                                }];
                    }
                });
            });
        }
    };
};
exports.StatusApiAxiosParamCreator = StatusApiAxiosParamCreator;
/**
 * StatusApi - functional programming interface
 * @export
 */
var StatusApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.StatusApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Node status and addressing info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.getStatus(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1["default"], base_1.BASE_PATH, configuration)];
                    }
                });
            });
        }
    };
};
exports.StatusApiFp = StatusApiFp;
/**
 * StatusApi - factory interface
 * @export
 */
var StatusApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.StatusApiFp)(configuration);
    return {
        /**
         *
         * @summary Node status and addressing info.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStatus: function (options) {
            return localVarFp.getStatus(options).then(function (request) { return request(axios, basePath); });
        }
    };
};
exports.StatusApiFactory = StatusApiFactory;
/**
 * StatusApi - object-oriented interface
 * @export
 * @class StatusApi
 * @extends {BaseAPI}
 */
var StatusApi = /** @class */ (function (_super) {
    __extends(StatusApi, _super);
    function StatusApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Node status and addressing info.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatusApi
     */
    StatusApi.prototype.getStatus = function (options) {
        var _this = this;
        return (0, exports.StatusApiFp)(this.configuration).getStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return StatusApi;
}(base_1.BaseAPI));
exports.StatusApi = StatusApi;
